#!/usr/bin/env node

/**
 * Module dependencies.
 */
'use strict'
const logger = require('winston');
const processType = process.env.PROCESS_TYPE;
logger.info(`Starting ${processType} process`, { pid: process.pid });

var app,debug;
var http = require('http');

if (processType === 'cobrand-inquiry') {
  //app = require('../services/cobrand/inquiry/app.js');
  app = require('../services/cobrand/inquiry');
  debug = require('debug')('cobrand-inquiry:server');
} else if (processType === 'cobrand-inquiry-id') {
  app = require('../services/cobrand/inquiry_id');
  debug = require('debug')('cobrand-inquiry-id:server');
} else if (processType === 'cobrand-inquiry-passport') {
  app = require('../services/cobrand/inquiry_passport');
  debug = require('debug')('cobrand-inquiry-passport:server');
} else {
  throw new Error(`${processType} is an unsupported process`)
} 



/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
